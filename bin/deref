#! /usr/bin/python

# This script resolves the references indicated by <tabRef>, <graphRef>
# and <dataValuesRef> tags in the XML files in the "dashboards", "tabs",
# "graphs", and "data" directory.
# 
# Usage:
# 
#     makeconfig INPUT_FILE
# 
#         where INPUT_FILE is one of the XML files in the
#         "dashboards",  "tabs", or "graphs" directory
#
# The output, which is written to standard output, is a version
# of the input file in which all the <tabRef>, <graphRef>
# and <dataValuesRef> tags have been replaced with the contents
# of the files they refer to, recursively.
#
# This script is intended primarily for using during development and
# debugging.  It isn't used in production; it's just a handy tool to
# make it easy to expand *Ref tags while editing the various XML
# files.
# 
# Mark Phillips
# Mon Nov 26 23:40:29 2012

import sys, os
import xml.etree.ElementTree as ET

def file_contents(file):
    contents = ""
    f = open(file, "r")
    for line in f:
        contents = contents + line
    f.close
    return contents

def deref(node):
    i = -1
    for child in node:
        i = i + 1
        if child.tag == "tabRef":
            refFile = "tabs/" + child.attrib["id"] + ".xml"
            childTree = ET.parse(refFile)
            childRoot = childTree.getroot()
            childRoot.attrib["id"] = child.attrib["id"]
            node[i] = deref(childRoot)
        elif child.tag == "graphRef":
            refFile = "graphs/" + child.attrib["id"] + ".xml"
            childTree = ET.parse(refFile)
            childRoot = childTree.getroot()
            childRoot.attrib["id"] = child.attrib["id"]
            node[i] = deref(childRoot)
        elif child.tag == "dataValuesRef":
            dataValuesCSVFile = "data/" + child.attrib['id']
            node.remove(child)
            node.text = file_contents(dataValuesCSVFile)
        else:
            node[i] = deref(child)
    return node


infile = sys.argv[1]

if not os.path.exists(infile):
    print "File %s not found." % infile
    sys.exit(0)

tree = ET.parse(infile)
root = tree.getroot()

print ET.tostring(deref(root))    
