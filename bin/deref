#! /usr/bin/python
#
# usage:
#
#    deref [-e ELEMENT] INFILE
#
# This script (recursively) resolves the references indicated by
# <tabRef>, <graphRef> and <dataValuesRef> tags in the input file
# INFILE.
#
# Each of the <tabRef>, <graphRef> <dataValuesRef> tags takes an `id`
# attribute, whose value indicates a file, and deref replaces the
# <*ref> tab with the contents of that files.  The files are resolved
# as follows:
#
#
#     XML input                   Replaced with contents of file
#     ---------                   ------------------------------
#     <tabRef id="NAME">          tabs/NAME.xml
#     <graphRef id="NAME">        graphs/NAME.xml
#     <dataValuesRef id="NAME">   data/NAME
#
# Note that for `tabRef` and `graphRef`, the suffix `.xml` is appended
# to the value of the `id` attribute in forming the filename, but no
# suffix is appended for `dataValuesRef`.
#
# Also note the the files are expected to be in subdirectories named
# `tabs`, `graphs`, and `data`; `deref` must be run in a current
# directory containing these subdirectories.
#
# The optional `-e` argument specifies an XML element name to be
# extracted; if `-e` is specfied, `deref` will print the XML tree
# rooted at the first occurence of that element in output.  If `-e` is
# not present, deref will print the entire XML output corresponding to
# INFILE.
#
# EXAMPLES:
#
#     Print the contents of dashboards/dashboard2.xml, with all <*ref> tags
#     replaced by the contents of the files they refer to:
#
#         ./bin/deref dashboards/dashboard2.xml
#
#     Print the `<mugl>` part of graphs/aoi.xml, with all <*ref> tags
#     replaced by the contents of the files they refer to:
#
#         ./bin/deref -e mugl graphs/aoi.xml
#
# Mark Phillips
# Sat May 11 09:20:10 2013

import sys, os, optparse
import xml.etree.ElementTree as ET

def file_contents(file):
    contents = ""
    f = open(file, "r")
    for line in f:
        contents = contents + line
    f.close
    return contents

def deref(node):
    i = -1
    for child in node:
        i = i + 1
        if child.tag == "tabRef":
            refFile = "tabs/" + child.attrib["id"] + ".xml"
            childTree = ET.parse(refFile)
            childRoot = childTree.getroot()
            childRoot.attrib["id"] = child.attrib["id"]
            node[i] = deref(childRoot)
        elif child.tag == "graphRef":
            refFile = "graphs/" + child.attrib["id"] + ".xml"
            childTree = ET.parse(refFile)
            childRoot = childTree.getroot()
            childRoot.attrib["id"] = child.attrib["id"]
            node[i] = deref(childRoot)
        elif child.tag == "dataValuesRef":
            dataValuesCSVFile = "data/" + child.attrib['id']
            node.remove(child)
            node.text = file_contents(dataValuesCSVFile)
        else:
            node[i] = deref(child)
    return node

def usage():
    print "usage: deref [-e TARGET_ELEMENT] INFILE"
    sys.exit(-1)

parser = optparse.OptionParser()
parser.add_option('-e', help='optional element name', dest='element', type="string")
(opts, args) = parser.parse_args()

if len(args) <= 0:
    usage()

infile = args[0]

if not os.path.exists(infile):
    print "File %s not found." % infile
    sys.exit(0)

tree = ET.parse(infile)
root = tree.getroot()

if opts.element is not None:
    print ET.tostring(deref(root.find(opts.element)))    
else:
    print ET.tostring(deref(root))    
